#!/usr/bin/which python

from __future__ import print_function, division

import sys
import os
from functools import partial

from argparse import ArgumentParser

import multiprocessing as mp

import numpy as np
import scipy.stats

import pysam


def parse_options(args):

    parser = ArgumentParser(description = "Learn the genome-wide beta model prior for nucleotide protection")

    parser.add_argument("tabix_files", metavar = "tabix_file", nargs = "+", type = str,
                        help = "Path to TABIX-format file(s) (e.g., ouput"
                        " from 'ftd-compute-deviation')")

    grp_m = parser.add_argument_group("model options")

    grp_m.add_argument("--fdr-cutoff", metavar = "N", type = float,
                        dest = "fdr_cutoff", default = 0.05,
                        help = "Only consider nucleotides with FDR <= this value."
                        " (default: %(default)s)")

    grp_m.add_argument("--exp-cutoff", metavar = "N", type = int,
                        dest = "exp_cutoff", default = 10,
                        help = "Only consider nucleotides with expected cleavages >= this value."
                        " (default: %(default)s)")

    grp_ot = parser.add_argument_group("other options")

    grp_ot.add_argument("--processors", metavar = "N", type = int,
                        dest = "processors", default = mp.cpu_count(),
                        help = "Number of processors to use."
                        " (default: all available processors)")

    return parser.parse_args(args)

##

def compute_beta_prior(filename, fdr_cutoff, exp_cutoff):

	handle = pysam.TabixFile(filename)

	ratios = []

	i = 0
	for row in handle.fetch(parser = pysam.asTuple()):

		exp = np.float64(row[3])
		obs = np.float64(row[4])
		fdr = np.float64(row[7])

		if fdr <= fdr_cutoff and exp >= exp_cutoff:
			ratios.append( (obs+1)/(exp+1) )
			i = i + 1

		if i > 10000:
			break

	handle.close()

	ratios = np.array(ratios)
	(a, b) = scipy.stats.beta.fit(ratios[ratios<1], floc = 0, fscale = 1)[0:2]

	return [a, b]

def main(argv = sys.argv[1:]):

	args = parse_options(argv)

	pool = mp.Pool(min(args.processors, len(args.tabix_files)))

	process_func = partial(compute_beta_prior, fdr_cutoff = args.fdr_cutoff, exp_cutoff = args.exp_cutoff)

	res = pool.map(process_func, args.tabix_files)

	for prior in res:
		print("%0.4f\t%0.4f" % (prior[0], prior[1]), file = sys.stdout)

	return 0

if __name__ == "__main__":
    sys.exit(main())
