#!/usr/bin/which python

from __future__ import print_function, division

import sys
import os, os.path

from argparse import ArgumentParser

import multiprocessing as mp

import numpy as np
import scipy.stats

import pysam

# import genome_tools
from genome_tools import bed, genomic_interval 

from footprint_tools.modeling import dispersion
from footprint_tools.stats import bayesian, segment

def parse_options(args):

    parser = ArgumentParser(description = "Compute the posterior probability of cleavage data")

    parser.add_argument("metadata_file", metavar = "metadata_file", type = str,
                        help = "Path to configuration file containing metadata for samples")

    parser.add_argument("interval_file", metavar = "interval_file", type = str, 
                        help = "File path to BED file")

    grp_st = parser.add_argument_group("statistical options")

    grp_st.add_argument("--fdr-cutoff", metavar = "N", type = float,
                        dest = "fdr_cutoff", default = 0.05,
                        help = "Only consider nucleotides with FDR <= this value."
                        " (default: %(default)s)")

    grp_o = parser.add_argument_group("output options")

    grp_o.add_argument("--post-cutoff", metavar = "N", type = float,
                        dest = "post_cutoff", default = 0.05,
                        help = "Only consider nucleotides with FDR <= this value."
                        " (default: %(default)s)")

    grp_ot = parser.add_argument_group("other options")

    grp_ot.add_argument("--processors", metavar = "N", type = int,
                        dest = "processors", default = mp.cpu_count(),
                        help = "Number of processors to use."
                        " (default: all available processors)")

    return parser.parse_args(args)

####

def read_interval_data(handles, interval):
    """ """
    n = len(handles)
    l = len(interval)

    obs = np.zeros((n, l), dtype = np.float64)
    exp = np.zeros((n, l), dtype = np.float64)
    fdr = np.ones((n, l), dtype = np.float64)
    w = np.zeros((n, l), dtype = np.float64)
    
    i = 0
    j = 0
    
    for tabix in handles:

        try:
            for row in tabix.fetch(interval.chrom, interval.start, interval.end, parser = pysam.asTuple()):
                j = int(row[1])-interval.start
                exp[i, j] = np.float64(row[3])
                obs[i, j] = np.float64(row[4])
                fdr[i, j] = np.float64(row[7])
                w[i, j] = 1
        except:
            pass

        i += 1

    return (exp, obs, fdr, w)

def read_func(inq, outq, filenames):
    """Opens file handles to all datasets and reads the data
    """
    handles = [pysam.TabixFile(f) for f in filenames]

    while 1:

        interval = inq.get()

        if interval == None:
            break

        (exp, obs, fdr, w) = read_interval_data(handles, interval)
        outq.put( (interval, exp, obs, fdr, w) )

    [handle.close() for handle in handles]

def compute_func(inq, outq, dm, beta_priors, fdr_cutoff, post_cutoff):
    """Consumes data from the read process and computes the posterior. The
    data is sent to the queue that is processed by the writer process.
    """
    #models = [dispersion.read_dispersion_model(f) for f in filenames]

    while 1:

        data = inq.get()

        if data == None:
            break
        
        (interval, exp, obs, fdr, w) = data

        #prior = bayesian.compute_prior(fpr) # no weights
    	prior = bayesian.compute_prior_weighted(fdr, w, cutoff = fdr_cutoff)   
    
    	#scale = bayesian.compute_delta(obs, exp, fpr, cutoff = 0.01)
    	scale = bayesian.compute_delta_prior(obs, exp, fdr, beta_priors, cutoff = fdr_cutoff)

    	ll_on = bayesian.log_likelihood(obs, exp, dm, delta = scale, w = 3) 
    	ll_off = bayesian.log_likelihood(obs, exp, dm, w = 3)

    	# Compute posterior
    	post = -bayesian.posterior(prior, ll_on, ll_off)
        post[post <= 0] = 0.0

        # Throw it into the output queue
        outq.put((interval, post))



def write_func(inq, n_datasets, n_intervals, filehandle):

    n = 0

    fmtr = ''.join(["\t{:0.4f}"] * (n_datasets))

    thresh = -np.log(0.5)
    padding = 3

    while n < n_intervals:

        n += 1

        data = inq.get()

        (interval, post) = data
        N, L = post.shape
 
        chrom = interval.chrom
        start = interval.start

        # To keep the filesize down, only output bases that reach a certain threshold, plus some buffer
        mask = np.zeros(L)
        for i in np.where(np.max(post, axis = 0) >= thresh)[0]:
            s = (i - padding) if (i - padding) > 0 else 0
            e = (i + padding) if (i + padding) < L else L
            mask[s:e] = 1

        out = ""
        for i in np.where(mask == 1)[0]:
            out += "{}\t{:d}\t{:d}\t".format(chrom, start+i, start+i+1) + '\t'.join(["%0.4f" % p for p in post[:,i]]) + '\n'
        print(out, end = '', file = filehandle)

def read_metadata_file(filename):

    ids = []
    dm_files = []
    tabix_files = []
    bp_files = []

    with open(filename) as f:  
        for line in f:
            
            if line[0] == "#":
                continue

            #TODO: add try statement
            (i, d, t, b) = line.strip().split("\t")

            ids.append(i)
            dm_files.append(d)
            tabix_files.append(t)
            bp_files.append(b if b != "!" else None)            

    return (ids, dm_files, tabix_files, bp_files)

def main(argv = sys.argv[1:]):

    args = parse_options(argv)

    (ids, disp_model_files, tabix_files, beta_prior_files) = read_metadata_file(args.metadata_file)

    n_datasets = len(ids)

    disp_models = []
    beta_priors = np.ones((n_datasets, 2))

    # Load and parse input files
    for i in range(n_datasets):

         # Check to make sure that all input files exist
        if not os.path.exists(tabix_files[i]):
            print("Fatal error: TABIX-file %s does not exists!" % tabix_files[i], file = sys.stderr)
            sys.exit(1)

        # Load dispersion model
        if not os.path.exists(disp_model_files[i]):
            print("Fatal error: Dispersion model file %s does not exists!" % disp_model_files[i], file = sys.stderr)
            sys.exit(1)
        else:
            disp_models.append(dispersion.read_dispersion_model(disp_model_files[i]))

        # Load the priors file
        if beta_prior_files[i]:
            if not os.path.exists(beta_prior_files[i]):
                print("Fatal error: Beta-prior file %s does not exists!" % beta_prior_files[i], file = sys.stderr)
                sys.exit(1)
            else:
                with open(beta_prior_files[i], 'r') as f:
                    params = f.readline().strip().split('\t')
                    beta_priors[i,:] = np.array(params, dtype = np.float64)

    # Load intervals file
    intervals = genomic_interval.genomic_interval_set(bed.bed3_iterator(open(args.interval_file)))
    n_intervals = len(intervals)

    #
    input_q = mp.Queue()
    process_q = mp.Queue()
    output_q = mp.Queue()

    readers = [mp.Process(target = read_func, 
                    args = (input_q, process_q, tabix_files))
                for i in range(2)]

    [proc.start() for proc in readers]

    processors = [mp.Process(target = compute_func, 
                    args = (process_q, output_q, disp_models, beta_priors, args.fdr_cutoff, -np.log(args.post_cutoff))) 
                for i in range(4)]

    [proc.start() for proc in processors]   

    writer = mp.Process(target = write_func, args = (output_q, n_datasets, n_intervals, sys.stdout))
    writer.start()

    # Write to input queue
    for interval in intervals:
        input_q.put(interval)
        while input_q.qsize() > 1000:
            pass

    # Wait for the writer to finish
    writer.join()

    # Send a kill signal to the reader processes
    [input_q.put(None) for i in range(2)]
    input_q.close()

    [proc.join() for proc in readers]

    # Send a kill signal to the processing processes
    [process_q.put(None) for i in range(4)]
    process_q.close()

    [proc.join() for proc in processors]

    output_q.close()

    return 0

if __name__ == "__main__":
    sys.exit(main())

